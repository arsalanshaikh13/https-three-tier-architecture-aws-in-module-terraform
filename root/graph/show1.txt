# module.alb.aws_lb.application_load_balancer:
resource "aws_lb" "application_load_balancer" {
    arn                                         = "arn:aws:elasticloadbalancing:us-east-1:513410254332:loadbalancer/app/three-tier-app-alb/783fee4da28e12a3"
    arn_suffix                                  = "app/three-tier-app-alb/783fee4da28e12a3"
    customer_owned_ipv4_pool                    = [90mnull[0m[0m
    desync_mitigation_mode                      = "defensive"
    dns_name                                    = "three-tier-app-alb-861025235.us-east-1.elb.amazonaws.com"
    drop_invalid_header_fields                  = false
    enable_cross_zone_load_balancing            = true
    enable_deletion_protection                  = false
    enable_http2                                = true
    enable_tls_version_and_cipher_suite_headers = false
    enable_waf_fail_open                        = false
    enable_xff_client_port                      = false
    id                                          = "arn:aws:elasticloadbalancing:us-east-1:513410254332:loadbalancer/app/three-tier-app-alb/783fee4da28e12a3"
    idle_timeout                                = 60
    internal                                    = false
    ip_address_type                             = "ipv4"
    load_balancer_type                          = "application"
    name                                        = "three-tier-app-alb"
    preserve_host_header                        = false
    security_groups                             = [
        "sg-01fb4493705c04f74",
    ]
    subnets                                     = [
        "subnet-0d213ef95039ce524",
        "subnet-0d9c6e4cded857c70",
    ]
    tags                                        = {
        "Name" = "three-tier-app-alb"
    }
    tags_all                                    = {
        "Name" = "three-tier-app-alb"
    }
    vpc_id                                      = "vpc-00a9b47f260ce0690"
    xff_header_processing_mode                  = "append"
    zone_id                                     = "Z35SXDOTRQ7X7K"

    access_logs {
        bucket  = [90mnull[0m[0m
        enabled = false
        prefix  = [90mnull[0m[0m
    }

    subnet_mapping {
        allocation_id        = [90mnull[0m[0m
        ipv6_address         = [90mnull[0m[0m
        outpost_id           = [90mnull[0m[0m
        private_ipv4_address = [90mnull[0m[0m
        subnet_id            = "subnet-0d213ef95039ce524"
    }
    subnet_mapping {
        allocation_id        = [90mnull[0m[0m
        ipv6_address         = [90mnull[0m[0m
        outpost_id           = [90mnull[0m[0m
        private_ipv4_address = [90mnull[0m[0m
        subnet_id            = "subnet-0d9c6e4cded857c70"
    }
}

# module.alb.aws_lb.internal_application_load_balancer:
resource "aws_lb" "internal_application_load_balancer" {
    arn                                         = "arn:aws:elasticloadbalancing:us-east-1:513410254332:loadbalancer/app/three-tier-app-internal-alb/2fe2e91baf407d14"
    arn_suffix                                  = "app/three-tier-app-internal-alb/2fe2e91baf407d14"
    customer_owned_ipv4_pool                    = [90mnull[0m[0m
    desync_mitigation_mode                      = "defensive"
    dns_name                                    = "internal-three-tier-app-internal-alb-1771350144.us-east-1.elb.amazonaws.com"
    drop_invalid_header_fields                  = false
    enable_cross_zone_load_balancing            = true
    enable_deletion_protection                  = false
    enable_http2                                = true
    enable_tls_version_and_cipher_suite_headers = false
    enable_waf_fail_open                        = false
    enable_xff_client_port                      = false
    id                                          = "arn:aws:elasticloadbalancing:us-east-1:513410254332:loadbalancer/app/three-tier-app-internal-alb/2fe2e91baf407d14"
    idle_timeout                                = 60
    internal                                    = true
    ip_address_type                             = "ipv4"
    load_balancer_type                          = "application"
    name                                        = "three-tier-app-internal-alb"
    preserve_host_header                        = false
    security_groups                             = [
        "sg-01fb4493705c04f74",
    ]
    subnets                                     = [
        "subnet-01e294dc0e4ba8dc1",
        "subnet-0e344c94500c1b418",
    ]
    tags                                        = {
        "Name" = "three-tier-app-internal-alb"
    }
    tags_all                                    = {
        "Name" = "three-tier-app-internal-alb"
    }
    vpc_id                                      = "vpc-00a9b47f260ce0690"
    xff_header_processing_mode                  = "append"
    zone_id                                     = "Z35SXDOTRQ7X7K"

    access_logs {
        bucket  = [90mnull[0m[0m
        enabled = false
        prefix  = [90mnull[0m[0m
    }

    subnet_mapping {
        allocation_id        = [90mnull[0m[0m
        ipv6_address         = [90mnull[0m[0m
        outpost_id           = [90mnull[0m[0m
        private_ipv4_address = [90mnull[0m[0m
        subnet_id            = "subnet-01e294dc0e4ba8dc1"
    }
    subnet_mapping {
        allocation_id        = [90mnull[0m[0m
        ipv6_address         = [90mnull[0m[0m
        outpost_id           = [90mnull[0m[0m
        private_ipv4_address = [90mnull[0m[0m
        subnet_id            = "subnet-0e344c94500c1b418"
    }
}

# module.alb.aws_lb_listener.alb_http_listener:
resource "aws_lb_listener" "alb_http_listener" {
    arn               = "arn:aws:elasticloadbalancing:us-east-1:513410254332:listener/app/three-tier-app-alb/783fee4da28e12a3/86622970692037c6"
    id                = "arn:aws:elasticloadbalancing:us-east-1:513410254332:listener/app/three-tier-app-alb/783fee4da28e12a3/86622970692037c6"
    load_balancer_arn = "arn:aws:elasticloadbalancing:us-east-1:513410254332:loadbalancer/app/three-tier-app-alb/783fee4da28e12a3"
    port              = 80
    protocol          = "HTTP"
    ssl_policy        = [90mnull[0m[0m
    tags              = {}
    tags_all          = {}

    default_action {
        order            = 1
        target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:513410254332:targetgroup/three-tier-app-tg/ea2374925a3523c3"
        type             = "forward"
    }
}

# module.alb.aws_lb_listener.internal_alb_http_listener:
resource "aws_lb_listener" "internal_alb_http_listener" {
    arn               = "arn:aws:elasticloadbalancing:us-east-1:513410254332:listener/app/three-tier-app-internal-alb/2fe2e91baf407d14/28b3d152ad889924"
    id                = "arn:aws:elasticloadbalancing:us-east-1:513410254332:listener/app/three-tier-app-internal-alb/2fe2e91baf407d14/28b3d152ad889924"
    load_balancer_arn = "arn:aws:elasticloadbalancing:us-east-1:513410254332:loadbalancer/app/three-tier-app-internal-alb/2fe2e91baf407d14"
    port              = 80
    protocol          = "HTTP"
    ssl_policy        = [90mnull[0m[0m
    tags              = {}
    tags_all          = {}

    default_action {
        order            = 1
        target_group_arn = "arn:aws:elasticloadbalancing:us-east-1:513410254332:targetgroup/three-tier-app-internal-alb-tg/ea66ccef8d58feef"
        type             = "forward"
    }
}

# module.alb.aws_lb_target_group.alb_target_group:
resource "aws_lb_target_group" "alb_target_group" {
    arn                                = "arn:aws:elasticloadbalancing:us-east-1:513410254332:targetgroup/three-tier-app-tg/ea2374925a3523c3"
    arn_suffix                         = "targetgroup/three-tier-app-tg/ea2374925a3523c3"
    connection_termination             = false
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-east-1:513410254332:targetgroup/three-tier-app-tg/ea2374925a3523c3"
    ip_address_type                    = "ipv4"
    lambda_multi_value_headers_enabled = false
    load_balancing_algorithm_type      = "round_robin"
    load_balancing_cross_zone_enabled  = "use_load_balancer_configuration"
    name                               = "three-tier-app-tg"
    port                               = 80
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {}
    tags_all                           = {}
    target_type                        = "instance"
    vpc_id                             = "vpc-00a9b47f260ce0690"

    health_check {
        enabled             = true
        healthy_threshold   = 2
        interval            = 300
        matcher             = "200"
        path                = "/"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 60
        unhealthy_threshold = 5
    }

    stickiness {
        cookie_duration = 86400
        cookie_name     = [90mnull[0m[0m
        enabled         = false
        type            = "lb_cookie"
    }

    target_failover {}
}

# module.alb.aws_lb_target_group.internal_alb_target_group:
resource "aws_lb_target_group" "internal_alb_target_group" {
    arn                                = "arn:aws:elasticloadbalancing:us-east-1:513410254332:targetgroup/three-tier-app-internal-alb-tg/ea66ccef8d58feef"
    arn_suffix                         = "targetgroup/three-tier-app-internal-alb-tg/ea66ccef8d58feef"
    connection_termination             = false
    deregistration_delay               = "300"
    id                                 = "arn:aws:elasticloadbalancing:us-east-1:513410254332:targetgroup/three-tier-app-internal-alb-tg/ea66ccef8d58feef"
    ip_address_type                    = "ipv4"
    lambda_multi_value_headers_enabled = false
    load_balancing_algorithm_type      = "round_robin"
    load_balancing_cross_zone_enabled  = "use_load_balancer_configuration"
    name                               = "three-tier-app-internal-alb-tg"
    port                               = 4000
    protocol                           = "HTTP"
    protocol_version                   = "HTTP1"
    proxy_protocol_v2                  = false
    slow_start                         = 0
    tags                               = {}
    tags_all                           = {}
    target_type                        = "instance"
    vpc_id                             = "vpc-00a9b47f260ce0690"

    health_check {
        enabled             = true
        healthy_threshold   = 2
        interval            = 300
        matcher             = "200"
        path                = "/"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 60
        unhealthy_threshold = 5
    }

    stickiness {
        cookie_duration = 86400
        cookie_name     = [90mnull[0m[0m
        enabled         = false
        type            = "lb_cookie"
    }

    target_failover {}
}
# module.asg.data.aws_ami.latest_amazon_linux:
data "aws_ami" "latest_amazon_linux" {
    architecture          = "arm64"
    arn                   = "arn:aws:ec2:us-east-1::image/ami-0b6a57ccc1405257a"
    block_device_mappings = [
        {
            device_name  = "/dev/xvda"
            ebs          = {
                "delete_on_termination" = "true"
                "encrypted"             = "false"
                "iops"                  = "3000"
                "snapshot_id"           = "snap-06d7668dd93671dd6"
                "throughput"            = "125"
                "volume_size"           = "8"
                "volume_type"           = "gp3"
            }
            no_device    = [90mnull[0m[0m
            virtual_name = [90mnull[0m[0m
        },
    ]
    boot_mode             = "uefi"
    creation_date         = "2025-10-09T16:42:44.000Z"
    deprecation_time      = "2026-01-07T00:00:00.000Z"
    description           = "Amazon Linux 2023 AMI 2023.9.20251014.0 arm64 HVM kernel-6.12"
    ena_support           = true
    hypervisor            = "xen"
    id                    = "ami-0b6a57ccc1405257a"
    image_id              = "ami-0b6a57ccc1405257a"
    image_location        = "amazon/al2023-ami-2023.9.20251014.0-kernel-6.12-arm64"
    image_owner_alias     = "amazon"
    image_type            = "machine"
    imds_support          = "v2.0"
    include_deprecated    = false
    kernel_id             = [90mnull[0m[0m
    most_recent           = true
    name                  = "al2023-ami-2023.9.20251014.0-kernel-6.12-arm64"
    owner_id              = "137112412989"
    owners                = [
        "amazon",
    ]
    platform              = [90mnull[0m[0m
    platform_details      = "Linux/UNIX"
    product_codes         = []
    public                = true
    ramdisk_id            = [90mnull[0m[0m
    root_device_name      = "/dev/xvda"
    root_device_type      = "ebs"
    root_snapshot_id      = "snap-06d7668dd93671dd6"
    sriov_net_support     = "simple"
    state                 = "available"
    state_reason          = {
        "code"    = "UNSET"
        "message" = "UNSET"
    }
    tags                  = {}
    tpm_support           = [90mnull[0m[0m
    usage_operation       = "RunInstances"
    virtualization_type   = "hvm"

    filter {
        name   = "name"
        values = [
            "al2023-ami-2023.*-arm64",
        ]
    }
    filter {
        name   = "virtualization-type"
        values = [
            "hvm",
        ]
    }
}

# module.asg.aws_launch_template.lt_name:
resource "aws_launch_template" "lt_name" {
    arn                                  = "arn:aws:ec2:us-east-1:513410254332:launch-template/lt-004c028e8dcc37982"
    default_version                      = 1
    description                          = [90mnull[0m[0m
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = [90mnull[0m[0m
    id                                   = "lt-004c028e8dcc37982"
    image_id                             = "ami-0b6a57ccc1405257a"
    instance_initiated_shutdown_behavior = [90mnull[0m[0m
    instance_type                        = "t4g.micro"
    kernel_id                            = [90mnull[0m[0m
    key_name                             = [90mnull[0m[0m
    latest_version                       = 1
    name                                 = "three-tier-app-tpl"
    name_prefix                          = [90mnull[0m[0m
    ram_disk_id                          = [90mnull[0m[0m
    tags                                 = {
        "Name" = "three-tier-app-tpl"
    }
    tags_all                             = {
        "Name" = "three-tier-app-tpl"
    }
    user_data                            = "IyEvYmluL2Jhc2gKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIENPTU1BTkRTIFRPIFJVTiBJTiBUSEUgV0VCIFNFUlZFUgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgQ09QWSBXRUItVElFUiBDT0RFIEZST00gUzMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpleGVjID4gPih0ZWUgL3Zhci9sb2cvdXNlci1kYXRhLmxvZykgMj4mMQpzdWRvIC1zdSBlYzItdXNlcgpjZCAvaG9tZS9lYzItdXNlcgoKIyAhISEgSU1QICEhIQojIE1PRElGWSBCRUxPVyBDT0RFIFdJVEggWU9VUiBTMyBCVUNLRVQgTkFNRQpzdWRvIGF3cyBzMyBjcCBzMzovL3BhbmRhLWZpbGVzLWFwcC9hcHBpbGNhdGlvbi1jb2RlL3dlYi10aWVyIHdlYi10aWVyIC0tcmVjdXJzaXZlCnN1ZG8gY2hvd24gLVIgZWMyLXVzZXI6ZWMyLXVzZXIgL2hvbWUvZWMyLXVzZXIKc3VkbyBjaG1vZCAtUiA3NTUgL2hvbWUvZWMyLXVzZXIKCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBJTlNUQUxMSU5HIE5PREVKUyAoRk9SIFVTSU5HIFJFQUNUIExJQlJBUlkpCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyAoUkVGOiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc2RrLWZvci1qYXZhc2NyaXB0L3YyL2RldmVsb3Blci1ndWlkZS9zZXR0aW5nLXVwLW5vZGUtb24tZWMyLWluc3RhbmNlLmh0bWwpCQpzdWRvIHJ1bnVzZXIgLWwgZWMyLXVzZXIgLWMgJwpjdXJsIC1vLSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbnZtLXNoL252bS92MC4zOS43L2luc3RhbGwuc2ggfCBiYXNoCnNvdXJjZSB+Ly5iYXNocmMKbnZtIGluc3RhbGwgMTYKbnZtIHVzZSAxNgpjZCAvaG9tZS9lYzItdXNlci93ZWItdGllcgpucG0gaW5zdGFsbApucG0gYXVkaXQgZml4CgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgQlVJTERJTkcgVEhFIEFQUCBGT1IgUFJPRFVDVElPTgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgQmVsb3cgY29tbWFuZCBpcyB1c2VkIHRvIGJ1aWxkIHRoZSBjb2RlIHdoaWNoIGNhbiBiZSBzZXJ2ZWQgYnkgdGhlIHdlYnNlcnZlciAoTmdpbngpCmNkIC9ob21lL2VjMi11c2VyL3dlYi10aWVyCm5wbSBydW4gYnVpbGQKJwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgSU5TVEFMTElORyBOR0lOWCAoV0VCU0VSVkVSKQojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgKFJFRjogaHR0cHM6Ly9kZXYudG8vMHhmZWRldi9ob3ctdG8taW5zdGFsbC1uZ2lueC1hcy1yZXZlcnNlLXByb3h5LWFuZC1jb25maWd1cmUtY2VydGJvdC1vbi1hbWF6b24tbGludXgtMjAyMy0yY2M5KQojIE5PVEU6IEJlZm9yZSB1c2luZyB0aGUgbmdpbnguY29uZiBmaWxlIGluIGJlbG93IGNvZGUsIGVuc3VyZSB0byBhZGQgdGhlIEludGVybmFsLUxvYWQtQmFsYW5jZXItRE5TIGluIHRoZSBuZ2lueC5jb25mIGZpbGUgJiB1cGxvYWQgaXQgdG8gUzMKCnN1ZG8geXVtIGluc3RhbGwgbmdpbnggLXkJCmNkIC9ldGMvbmdpbngKc3VkbyBtdiBuZ2lueC5jb25mIG5naW54LWJhY2t1cC5jb25mCgojICEhISBJTVAgISEhCiMgTU9ESUZZIEJFTE9XIENPREUgV0lUSCBZT1VSIFMzIEJVQ0tFVCBOQU1FCnN1ZG8gYXdzIHMzIGNwIHMzOi8vcGFuZGEtZmlsZXMtYXBwL2FwcGxpY2F0aW9uLWNvZGUvbmdpbnguY29uZiAuCnN1ZG8gc2VkIC1pICJzLzxZb3VyLUludGVybmFsLUxvYWRCYWxhbmNlci1ETlM+L2ludGVybmFsLXRocmVlLXRpZXItYXBwLWludGVybmFsLWFsYi0xNzcxMzUwMTQ0LnVzLWVhc3QtMS5lbGIuYW1hem9uYXdzLmNvbS9nIiBuZ2lueC5jb25mCgpzdWRvIGNobW9kIC1SIDc1NSAvaG9tZS9lYzItdXNlcgpzdWRvIHNlcnZpY2UgbmdpbnggcmVzdGFydApzdWRvIGNoa2NvbmZpZyBuZ2lueCBvbgoKCg=="
    vpc_security_group_ids               = [
        "sg-02409d87c839d115a",
    ]

    block_device_mappings {
        device_name  = "/dev/xvda"
        no_device    = [90mnull[0m[0m
        virtual_name = [90mnull[0m[0m

        ebs {
            delete_on_termination = "true"
            encrypted             = "true"
            iops                  = 0
            kms_key_id            = [90mnull[0m[0m
            snapshot_id           = [90mnull[0m[0m
            throughput            = 0
            volume_size           = 8
            volume_type           = "standard"
        }
    }

    iam_instance_profile {
        arn  = [90mnull[0m[0m
        name = "S3-SSM-Profile"
    }

    network_interfaces {
        associate_carrier_ip_address = [90mnull[0m[0m
        associate_public_ip_address  = "false"
        delete_on_termination        = [90mnull[0m[0m
        description                  = [90mnull[0m[0m
        device_index                 = 0
        interface_type               = [90mnull[0m[0m
        ipv4_address_count           = 0
        ipv4_prefix_count            = 0
        ipv6_address_count           = 0
        ipv6_prefix_count            = 0
        network_card_index           = 0
        network_interface_id         = [90mnull[0m[0m
        private_ip_address           = [90mnull[0m[0m
        subnet_id                    = [90mnull[0m[0m
    }

    tag_specifications {
        resource_type = "instance"
        tags          = {
            "Name" = "three-tier-app-client"
        }
    }
}

# module.asg.aws_launch_template.server_lt_name:
resource "aws_launch_template" "server_lt_name" {
    arn                                  = "arn:aws:ec2:us-east-1:513410254332:launch-template/lt-08737f3c774a4c988"
    default_version                      = 1
    description                          = [90mnull[0m[0m
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = [90mnull[0m[0m
    id                                   = "lt-08737f3c774a4c988"
    image_id                             = "ami-0b6a57ccc1405257a"
    instance_initiated_shutdown_behavior = [90mnull[0m[0m
    instance_type                        = "t4g.micro"
    kernel_id                            = [90mnull[0m[0m
    key_name                             = [90mnull[0m[0m
    latest_version                       = 1
    name                                 = "three-tier-app-server_tpl"
    name_prefix                          = [90mnull[0m[0m
    ram_disk_id                          = [90mnull[0m[0m
    tags                                 = {
        "Name" = "three-tier-app-server_tpl"
    }
    tags_all                             = {
        "Name" = "three-tier-app-server_tpl"
    }
    user_data                            = "IyEvYmluL2Jhc2gKZXhlYyA+ID4odGVlIC92YXIvbG9nL3VzZXItZGF0YS5sb2cpIDI+JjEKI3NldCAteGUKCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBDT01NQU5EUyBUTyBSVU4gSU4gVEhFIEFQUExJQ0FUSU9OIFNFUlZFUgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgSU5TVEFMTElORyBNWVNRTCBJTiBBTUFaT04gTElOVVggMjAyMwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgKFJFRjogaHR0cHM6Ly9kZXYudG8vYXdzLWJ1aWxkZXJzL2luc3RhbGxpbmctbXlzcWwtb24tYW1hem9uLWxpbnV4LTIwMjMtMTUxMikKCgoKc3VkbyAtc3UgZWMyLXVzZXIKc3VkbyB3Z2V0IGh0dHBzOi8vZGV2Lm15c3FsLmNvbS9nZXQvbXlzcWw4MC1jb21tdW5pdHktcmVsZWFzZS1lbDktMS5ub2FyY2gucnBtCnN1ZG8gZG5mIGluc3RhbGwgbXlzcWw4MC1jb21tdW5pdHktcmVsZWFzZS1lbDktMS5ub2FyY2gucnBtIC15CnN1ZG8gcnBtIC0taW1wb3J0IGh0dHBzOi8vcmVwby5teXNxbC5jb20vUlBNLUdQRy1LRVktbXlzcWwtMjAyMwpzdWRvIGRuZiBpbnN0YWxsIG15c3FsLWNvbW11bml0eS1jbGllbnQgLXkKbXlzcWwgLS12ZXJzaW9uCgojIFRPIFRFU1QgQ09OTkVDVElPTiBCRVRXRUVOIEFQUC1TRVJWRVIgJiBEQVRBQkFTRSBTRVJWRVIKbXlzcWwgLWggInBhbmRhLWRldi1kYi5jdzVjNHV1bXc5aDUudXMtZWFzdC0xLnJkcy5hbWF6b25hd3MuY29tOjMzMDYiIFwKICAgICAgLXUgImFkbWluXzNfdGllciIgXAogICAgICAtcCJBc2QxLUNhUFEyMiIgPDxFT0YKQ1JFQVRFIERBVEFCQVNFIHJlYWN0X25vZGVfYXBwOwpTSE9XIERBVEFCQVNFUzsKVVNFIHJlYWN0X25vZGVfYXBwOwpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB0cmFuc2FjdGlvbnMoaWQgSU5UIE5PVCBOVUxMCkFVVE9fSU5DUkVNRU5ULCBhbW91bnQgREVDSU1BTCgxMCwyKSwgZGVzY3JpcHRpb24KVkFSQ0hBUigxMDApLCBQUklNQVJZIEtFWShpZCkpOyAgICAKU0hPVyBUQUJMRVM7ICAgIApJTlNFUlQgSU5UTyB0cmFuc2FjdGlvbnMgKGFtb3VudCxkZXNjcmlwdGlvbikgVkFMVUVTICgnNDAwJywnZ3JvY2VyaWVzJyk7ICAgClNFTEVDVCAqIEZST00gdHJhbnNhY3Rpb25zOwpFT0YKCgojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIENPUFlJTkcgQ09OVEVOVCBGUk9NIFMzIEJVQ0tFVAojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojICEhISBJTVAgISEhCiMgTU9ESUZZIEJFTE9XIENPREUgV0lUSCBZT1VSIFMzIEJVQ0tFVCBOQU1FCiMgQ09QWSBBUFAgQ09ERQpjZCAvaG9tZS9lYzItdXNlcgphd3MgczMgY3AgczM6Ly9wYW5kYS1maWxlcy1hcHAvYXBwbGljYXRpb24tY29kZS9hcHAtdGllciBhcHAtdGllciAtLXJlY3Vyc2l2ZQoKc3VkbyBzZWQgLWkgInMvREJfSE9TVCA6ICcnL0RCX0hPU1QgOiBwYW5kYS1kZXYtZGIuY3c1YzR1dW13OWg1LnVzLWVhc3QtMS5yZHMuYW1hem9uYXdzLmNvbTozMzA2LyIgYXBwLXRpZXIvRGJDb25maWcuanMKc3VkbyBzZWQgLWkgInMvREJfVVNFUiA6ICcnL0RCX1VTRVIgOiBhZG1pbl8zX3RpZXIvIiBhcHAtdGllci9EYkNvbmZpZy5qcwpzdWRvIHNlZCAtaSAicy9EQl9QV0QgIDogJycvREJfUFdEICA6IEFzZDEtQ2FQUTIyLyIgYXBwLXRpZXIvRGJDb25maWcuanMKc3VkbyBzZWQgLWkgInMvREJfREFUQUJBU0UgOiAnJy9EQl9EQVRBQkFTRSA6IHJlYWN0X25vZGVfYXBwLyIgYXBwLXRpZXIvRGJDb25maWcuanMKCgpjaG93biAtUiBlYzItdXNlcjplYzItdXNlciAvaG9tZS9lYzItdXNlci9hcHAtdGllcgpjaG1vZCAtUiA3NTUgL2hvbWUvZWMyLXVzZXIvYXBwLXRpZXIKCiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMgSU5TVEFMTElORyBOT0RFSlMKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyAoUkVGOiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc2RrLWZvci1qYXZhc2NyaXB0L3YyL2RldmVsb3Blci1ndWlkZS9zZXR0aW5nLXVwLW5vZGUtb24tZWMyLWluc3RhbmNlLmh0bWwpCgojIFJVTiBOVk0vTm9kZS9QTTIgQVMgZWMyLXVzZXIKc3VkbyBydW51c2VyIC1sIGVjMi11c2VyIC1jICcKIyBzZXQgLXhlCmV4cG9ydCBIT01FPS9ob21lL2VjMi11c2VyCmV4cG9ydCBOVk1fRElSPSIkSE9NRS8ubnZtIgoKIyBJbnN0YWxsIE5WTQpjdXJsIC1vLSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbnZtLXNoL252bS92MC4zOS43L2luc3RhbGwuc2ggfCBiYXNoCgojIExvYWQgTlZNClsgLXMgIiROVk1fRElSL252bS5zaCIgXSAmJiBcLiAiJE5WTV9ESVIvbnZtLnNoIgoKIyBJbnN0YWxsIE5vZGUuanMgMTYgYW5kIHNldCBkZWZhdWx0Cm52bSBpbnN0YWxsIDE2Cm52bSBhbGlhcyBkZWZhdWx0IDE2Cm52bSB1c2UgMTYKCiMgSW5zdGFsbCBkZXBlbmRlbmNpZXMgYW5kIFBNMgpucG0gaW5zdGFsbCAtZyBwbTIKY2QgL2hvbWUvZWMyLXVzZXIvYXBwLXRpZXIKbnBtIGluc3RhbGwKbnBtIGF1ZGl0IGZpeCB8fCB0cnVlCgojPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIFNUQVJUSU5HIElOREVYLkpTIEZJTEUKIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyBTdGFydCBhcHAgd2l0aCBQTTIKcG0yIHN0YXJ0IGluZGV4LmpzCnBtMiBzdGFydHVwIHN5c3RlbWQgLXUgZWMyLXVzZXIgLS1ocCAvaG9tZS9lYzItdXNlcgonCnN1ZG8gZW52IFBBVEg9JFBBVEg6L2hvbWUvZWMyLXVzZXIvLm52bS92ZXJzaW9ucy9ub2RlL3YxNi4yMC4yL2JpbiAvaG9tZS9lYzItdXNlci8ubnZtL3ZlcnNpb25zL25vZGUvdjE2LjIwLjIvbGliL25vZGVfbW9kdWxlcy9wbTIvYmluL3BtMiBzdGFydHVwIHN5c3RlbWQgLXUgZWMyLXVzZXIgLS1ocCAvaG9tZS9lYzItdXNlcgpzdWRvIHJ1bnVzZXIgLWwgZWMyLXVzZXIgLWMgJ3BtMiBzYXZlJwoKIyBIRUFMVEggQ0hFQ0sKY3VybCAtZiBodHRwOi8vbG9jYWxob3N0OjQwMDAvaGVhbHRoIHx8IGVjaG8gIkhlYWx0aCBjaGVjayBmYWlsZWQiCgoKCiMvZXRjL3N5c3RlbWQvc3lzdGVtL3BtMi1lYzItdXNlci5zZXJ2aWNlLgo="
    vpc_security_group_ids               = [
        "sg-08489743f8adc245c",
    ]

    block_device_mappings {
        device_name  = "/dev/xvda"
        no_device    = [90mnull[0m[0m
        virtual_name = [90mnull[0m[0m

        ebs {
            delete_on_termination = "true"
            encrypted             = "true"
            iops                  = 0
            kms_key_id            = [90mnull[0m[0m
            snapshot_id           = [90mnull[0m[0m
            throughput            = 0
            volume_size           = 8
            volume_type           = "standard"
        }
    }

    iam_instance_profile {
        arn  = [90mnull[0m[0m
        name = "S3-SSM-Profile"
    }

    network_interfaces {
        associate_carrier_ip_address = [90mnull[0m[0m
        associate_public_ip_address  = "false"
        delete_on_termination        = [90mnull[0m[0m
        description                  = [90mnull[0m[0m
        device_index                 = 0
        interface_type               = [90mnull[0m[0m
        ipv4_address_count           = 0
        ipv4_prefix_count            = 0
        ipv6_address_count           = 0
        ipv6_prefix_count            = 0
        network_card_index           = 0
        network_interface_id         = [90mnull[0m[0m
        private_ip_address           = [90mnull[0m[0m
        subnet_id                    = [90mnull[0m[0m
    }

    tag_specifications {
        resource_type = "instance"
        tags          = {
            "Name" = "three-tier-app-server"
        }
    }
}

# module.asg.aws_s3_object.DbConfig:
resource "aws_s3_object" "DbConfig" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "bfce9b283f38d5e96574b2be4d1ebd3b"
    force_destroy                 = false
    id                            = "application-code/app-tier/DbConfig.js"
    key                           = "application-code/app-tier/DbConfig.js"
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/app-tier/DbConfig.js"
    storage_class                 = "STANDARD"
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.asg.local_file.DbConfig:
resource "local_file" "DbConfig" {
    content              = <<-EOT
        module.exports = Object.freeze({
            DB_HOST : '',
            DB_USER : '',
            DB_PWD : '',
            DB_DATABASE : ''
        });
    EOT
    content_base64sha256 = "ltDXmATCOhXVYhd610ihTRfzwgilVB3bES6finqlCd0="
    content_base64sha512 = "4lUEunLc62FtchKzi1Ga5M6mej3ALCMFs/9orzjzloQxJsNk/G1mU0o11omLf9CEOaXR1ccusEmwy6PefQfF9Q=="
    content_md5          = "bfce9b283f38d5e96574b2be4d1ebd3b"
    content_sha1         = "0304856d03fecfdbb3a19f544cb48e767e20bee5"
    content_sha256       = "96d0d79804c23a15d562177ad748a14d17f3c208a5541ddb112e9f8a7aa509dd"
    content_sha512       = "e25504ba72dceb616d7212b38b519ae4cea67a3dc02c2305b3ff68af38f396843126c364fc6d66534a35d6898b7fd08439a5d1d5c72eb049b0cba3de7d07c5f5"
    directory_permission = "0777"
    file_permission      = "0777"
    filename             = "./application-code/application-code/app-tier/DbConfig.js"
    id                   = "0304856d03fecfdbb3a19f544cb48e767e20bee5"
}
# module.iam_role.aws_iam_instance_profile.s3_ssm_profile:
resource "aws_iam_instance_profile" "s3_ssm_profile" {
    arn         = "arn:aws:iam::513410254332:instance-profile/S3-SSM-Profile"
    create_date = "2025-10-17T06:05:35Z"
    id          = "S3-SSM-Profile"
    name        = "S3-SSM-Profile"
    name_prefix = [90mnull[0m[0m
    path        = "/"
    role        = "S3-SSM-Role"
    tags        = {}
    tags_all    = {}
    unique_id   = "AIPAXPCNCYX6EMXXNVFXK"
}

# module.iam_role.aws_iam_role.s3_ssm_role:
resource "aws_iam_role" "s3_ssm_role" {
    arn                   = "arn:aws:iam::513410254332:role/S3-SSM-Role"
    assume_role_policy    = jsonencode(
        {
            Statement = [
                {
                    Action    = "sts:AssumeRole"
                    Effect    = "Allow"
                    Principal = {
                        Service = "ec2.amazonaws.com"
                    }
                },
            ]
            Version   = "2012-10-17"
        }
    )
    create_date           = "2025-10-17T05:52:43Z"
    description           = [90mnull[0m[0m
    force_detach_policies = false
    id                    = "S3-SSM-Role"
    managed_policy_arns   = [
        "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
        "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
    ]
    max_session_duration  = 3600
    name                  = "S3-SSM-Role"
    name_prefix           = [90mnull[0m[0m
    path                  = "/"
    role_last_used        = [
        {
            last_used_date = "2025-10-17T06:36:46Z"
            region         = "us-east-1"
        },
    ]
    tags                  = {
        "Name"    = "S3-SSM-Role"
        "Purpose" = "Allow EC2 to access S3 and use SSM agent"
    }
    tags_all              = {
        "Name"    = "S3-SSM-Role"
        "Purpose" = "Allow EC2 to access S3 and use SSM agent"
    }
    unique_id             = "AROAXPCNCYX6ERJXG5HLR"
}

# module.iam_role.aws_iam_role_policy_attachment.s3_readonly_attach:
resource "aws_iam_role_policy_attachment" "s3_readonly_attach" {
    id         = "S3-SSM-Role-20251017055245073300000001"
    policy_arn = "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
    role       = "S3-SSM-Role"
}

# module.iam_role.aws_iam_role_policy_attachment.ssm_core_attach:
resource "aws_iam_role_policy_attachment" "ssm_core_attach" {
    id         = "S3-SSM-Role-20251017055245404000000002"
    policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
    role       = "S3-SSM-Role"
}
# module.nat_instance.data.aws_ami.latest_amazon_linux:
data "aws_ami" "latest_amazon_linux" {
    architecture          = "arm64"
    arn                   = "arn:aws:ec2:us-east-1::image/ami-0858e76ce571eb464"
    block_device_mappings = [
        {
            device_name  = "/dev/xvda"
            ebs          = {
                "delete_on_termination" = "true"
                "encrypted"             = "false"
                "iops"                  = "3000"
                "snapshot_id"           = "snap-014b57d909ba4648b"
                "throughput"            = "125"
                "volume_size"           = "8"
                "volume_type"           = "gp3"
            }
            no_device    = [90mnull[0m[0m
            virtual_name = [90mnull[0m[0m
        },
    ]
    boot_mode             = "uefi"
    creation_date         = "2025-10-09T16:42:44.000Z"
    deprecation_time      = "2026-01-07T00:00:00.000Z"
    description           = "Amazon Linux 2023 AMI 2023.9.20251014.0 arm64 HVM kernel-6.1"
    ena_support           = true
    hypervisor            = "xen"
    id                    = "ami-0858e76ce571eb464"
    image_id              = "ami-0858e76ce571eb464"
    image_location        = "amazon/al2023-ami-2023.9.20251014.0-kernel-6.1-arm64"
    image_owner_alias     = "amazon"
    image_type            = "machine"
    imds_support          = "v2.0"
    include_deprecated    = false
    kernel_id             = [90mnull[0m[0m
    most_recent           = true
    name                  = "al2023-ami-2023.9.20251014.0-kernel-6.1-arm64"
    owner_id              = "137112412989"
    owners                = [
        "amazon",
    ]
    platform              = [90mnull[0m[0m
    platform_details      = "Linux/UNIX"
    product_codes         = []
    public                = true
    ramdisk_id            = [90mnull[0m[0m
    root_device_name      = "/dev/xvda"
    root_device_type      = "ebs"
    root_snapshot_id      = "snap-014b57d909ba4648b"
    sriov_net_support     = "simple"
    state                 = "available"
    state_reason          = {
        "code"    = "UNSET"
        "message" = "UNSET"
    }
    tags                  = {}
    tpm_support           = [90mnull[0m[0m
    usage_operation       = "RunInstances"
    virtualization_type   = "hvm"

    filter {
        name   = "name"
        values = [
            "al2023-ami-2023.*-arm64",
        ]
    }
    filter {
        name   = "virtualization-type"
        values = [
            "hvm",
        ]
    }
}

# module.nat_instance.aws_instance.nat_ec2_instance:
resource "aws_instance" "nat_ec2_instance" {
    ami                                  = "ami-0858e76ce571eb464"
    arn                                  = "arn:aws:ec2:us-east-1:513410254332:instance/i-0e8d9be32c1ff9136"
    associate_public_ip_address          = true
    availability_zone                    = "us-east-1a"
    cpu_core_count                       = 2
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    host_id                              = [90mnull[0m[0m
    iam_instance_profile                 = "S3-SSM-Profile"
    id                                   = "i-0e8d9be32c1ff9136"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "running"
    instance_type                        = "t4g.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    key_name                             = [90mnull[0m[0m
    monitoring                           = false
    outpost_arn                          = [90mnull[0m[0m
    password_data                        = [90mnull[0m[0m
    placement_group                      = [90mnull[0m[0m
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-07383a70fcd04c9e4"
    private_dns                          = "ip-10-0-1-167.ec2.internal"
    private_ip                           = "10.0.1.167"
    public_dns                           = "ec2-13-220-243-4.compute-1.amazonaws.com"
    public_ip                            = "13.220.243.4"
    secondary_private_ips                = []
    security_groups                      = []
    source_dest_check                    = false
    subnet_id                            = "subnet-0d213ef95039ce524"
    tags                                 = {
        "Environment" = "dev"
        "Name"        = "self-managed-nat-ec2-instance"
        "Terraform"   = "true"
    }
    tags_all                             = {
        "Environment" = "dev"
        "Name"        = "self-managed-nat-ec2-instance"
        "Terraform"   = "true"
    }
    tenancy                              = "default"
    user_data                            = "37466f4f64deda81aba492cc4903affd8f02bc1b"
    user_data_replace_on_change          = false
    vpc_security_group_ids               = [
        "sg-0669660bc0bffca25",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        amd_sev_snp      = [90mnull[0m[0m
        core_count       = 2
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "unlimited"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = false
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/xvda"
        encrypted             = false
        iops                  = 0
        kms_key_id            = [90mnull[0m[0m
        throughput            = 0
        volume_id             = "vol-083535c65561e56df"
        volume_size           = 8
        volume_type           = "standard"
    }
}

# module.nat_instance.aws_instance.nat_ec2_instance: (deposed object 0399b5f5)
resource "aws_instance" "nat_ec2_instance" {
    ami                                  = "ami-0b6a57ccc1405257a"
    arn                                  = "arn:aws:ec2:us-east-1:513410254332:instance/i-0baf8ffea4b52dee6"
    associate_public_ip_address          = true
    availability_zone                    = "us-east-1a"
    cpu_core_count                       = 2
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    host_id                              = [90mnull[0m[0m
    iam_instance_profile                 = "S3-SSM-Profile"
    id                                   = "i-0baf8ffea4b52dee6"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "running"
    instance_type                        = "t4g.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    key_name                             = [90mnull[0m[0m
    monitoring                           = false
    outpost_arn                          = [90mnull[0m[0m
    password_data                        = [90mnull[0m[0m
    placement_group                      = [90mnull[0m[0m
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-079ff620b08745b70"
    private_dns                          = "ip-10-0-1-83.ec2.internal"
    private_ip                           = "10.0.1.83"
    public_dns                           = "ec2-3-238-57-146.compute-1.amazonaws.com"
    public_ip                            = "3.238.57.146"
    secondary_private_ips                = []
    security_groups                      = []
    source_dest_check                    = false
    subnet_id                            = "subnet-0d213ef95039ce524"
    tags                                 = {
        "Environment" = "dev"
        "Name"        = "self-managed-nat-ec2-instance"
        "Terraform"   = "true"
    }
    tags_all                             = {
        "Environment" = "dev"
        "Name"        = "self-managed-nat-ec2-instance"
        "Terraform"   = "true"
    }
    tenancy                              = "default"
    user_data                            = "37466f4f64deda81aba492cc4903affd8f02bc1b"
    user_data_replace_on_change          = false
    vpc_security_group_ids               = [
        "sg-0669660bc0bffca25",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        amd_sev_snp      = [90mnull[0m[0m
        core_count       = 2
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "unlimited"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = false
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/xvda"
        encrypted             = false
        iops                  = 0
        kms_key_id            = [90mnull[0m[0m
        tags                  = {}
        throughput            = 0
        volume_id             = "vol-0045cdb089817597b"
        volume_size           = 8
        volume_type           = "standard"
    }
}

# module.nat_instance.aws_route_table.pri-rt-a:
resource "aws_route_table" "pri-rt-a" {
    arn              = "arn:aws:ec2:us-east-1:513410254332:route-table/rtb-0d23fbbbf4bc49ab8"
    id               = "rtb-0d23fbbbf4bc49ab8"
    owner_id         = "513410254332"
    propagating_vgws = []
    route            = [
        {
            carrier_gateway_id         = [90mnull[0m[0m
            cidr_block                 = "0.0.0.0/0"
            core_network_arn           = [90mnull[0m[0m
            destination_prefix_list_id = [90mnull[0m[0m
            egress_only_gateway_id     = [90mnull[0m[0m
            gateway_id                 = [90mnull[0m[0m
            instance_id                = [90mnull[0m[0m
            ipv6_cidr_block            = [90mnull[0m[0m
            local_gateway_id           = [90mnull[0m[0m
            nat_gateway_id             = [90mnull[0m[0m
            network_interface_id       = "eni-07383a70fcd04c9e4"
            transit_gateway_id         = [90mnull[0m[0m
            vpc_endpoint_id            = [90mnull[0m[0m
            vpc_peering_connection_id  = [90mnull[0m[0m
        },
    ]
    tags             = {
        "Name" = "Pri-rt-a"
    }
    tags_all         = {
        "Name" = "Pri-rt-a"
    }
    vpc_id           = "vpc-00a9b47f260ce0690"
}

# module.nat_instance.aws_route_table.pri-rt-b:
resource "aws_route_table" "pri-rt-b" {
    arn              = "arn:aws:ec2:us-east-1:513410254332:route-table/rtb-062018d292a08c344"
    id               = "rtb-062018d292a08c344"
    owner_id         = "513410254332"
    propagating_vgws = []
    route            = [
        {
            carrier_gateway_id         = [90mnull[0m[0m
            cidr_block                 = "0.0.0.0/0"
            core_network_arn           = [90mnull[0m[0m
            destination_prefix_list_id = [90mnull[0m[0m
            egress_only_gateway_id     = [90mnull[0m[0m
            gateway_id                 = [90mnull[0m[0m
            instance_id                = [90mnull[0m[0m
            ipv6_cidr_block            = [90mnull[0m[0m
            local_gateway_id           = [90mnull[0m[0m
            nat_gateway_id             = [90mnull[0m[0m
            network_interface_id       = "eni-07383a70fcd04c9e4"
            transit_gateway_id         = [90mnull[0m[0m
            vpc_endpoint_id            = [90mnull[0m[0m
            vpc_peering_connection_id  = [90mnull[0m[0m
        },
    ]
    tags             = {
        "Name" = "pri-rt-b"
    }
    tags_all         = {
        "Name" = "pri-rt-b"
    }
    vpc_id           = "vpc-00a9b47f260ce0690"
}

# module.nat_instance.aws_route_table_association.pri-sub-3a-with-Pri-rt-a:
resource "aws_route_table_association" "pri-sub-3a-with-Pri-rt-a" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-06ebe6dbfe975e17e"
    route_table_id = "rtb-0d23fbbbf4bc49ab8"
    subnet_id      = "subnet-0cc105a62bc97ceda"
}

# module.nat_instance.aws_route_table_association.pri-sub-4b-with-Pri-rt-b:
resource "aws_route_table_association" "pri-sub-4b-with-Pri-rt-b" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-045cd3d0c6b1caf9c"
    route_table_id = "rtb-0d23fbbbf4bc49ab8"
    subnet_id      = "subnet-0be916784820486ac"
}

# module.nat_instance.aws_route_table_association.pri-sub-5a-with-pri-rt-b:
resource "aws_route_table_association" "pri-sub-5a-with-pri-rt-b" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-08e742ea146517bd0"
    route_table_id = "rtb-062018d292a08c344"
    subnet_id      = "subnet-01e294dc0e4ba8dc1"
}

# module.nat_instance.aws_route_table_association.pri-sub-6b-with-pri-rt-b:
resource "aws_route_table_association" "pri-sub-6b-with-pri-rt-b" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-0d13d3ad9b498e614"
    route_table_id = "rtb-062018d292a08c344"
    subnet_id      = "subnet-0e344c94500c1b418"
}

# module.nat_instance.aws_security_group.nat_ec2_sg:
resource "aws_security_group" "nat_ec2_sg" {
    arn                    = "arn:aws:ec2:us-east-1:513410254332:security-group/sg-0669660bc0bffca25"
    description            = "Security group of Self-Managed NAT EC2 Instance"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "Allow all outbound traffic"
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-0669660bc0bffca25"
    ingress                = [
        {
            cidr_blocks      = [
                "10.0.0.0/16",
            ]
            description      = "Allow all TCP traffic from VPC CIDR"
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 65535
        },
    ]
    name                   = "self-managed-nat-ec2-sg"
    name_prefix            = [90mnull[0m[0m
    owner_id               = "513410254332"
    revoke_rules_on_delete = false
    tags                   = {
        "Environment" = "dev"
        "Name"        = "self-managed-nat-ec2-instance-sg"
        "Terraform"   = "true"
    }
    tags_all               = {
        "Environment" = "dev"
        "Name"        = "self-managed-nat-ec2-instance-sg"
        "Terraform"   = "true"
    }
    vpc_id                 = "vpc-00a9b47f260ce0690"
}
# module.rds.aws_db_instance.panda-database:
resource "aws_db_instance" "panda-database" {
    address                               = "panda-dev-db.cw5c4uumw9h5.us-east-1.rds.amazonaws.com"
    allocated_storage                     = 20
    apply_immediately                     = false
    arn                                   = "arn:aws:rds:us-east-1:513410254332:db:panda-dev-db"
    auto_minor_version_upgrade            = true
    availability_zone                     = "us-east-1b"
    backup_retention_period               = 0
    backup_window                         = "07:16-07:46"
    ca_cert_identifier                    = "rds-ca-rsa2048-g1"
    character_set_name                    = [90mnull[0m[0m
    copy_tags_to_snapshot                 = false
    custom_iam_instance_profile           = [90mnull[0m[0m
    customer_owned_ip_enabled             = false
    db_name                               = [90mnull[0m[0m
    db_subnet_group_name                  = "panda-db-subnet-a-b"
    delete_automated_backups              = true
    deletion_protection                   = false
    domain                                = [90mnull[0m[0m
    domain_iam_role_name                  = [90mnull[0m[0m
    endpoint                              = "panda-dev-db.cw5c4uumw9h5.us-east-1.rds.amazonaws.com:3306"
    engine                                = "mysql"
    engine_version                        = "8.0.42"
    engine_version_actual                 = "8.0.42"
    hosted_zone_id                        = "Z2R2ITUGPM61AM"
    iam_database_authentication_enabled   = false
    id                                    = "panda-dev-db"
    identifier                            = "panda-dev-db"
    identifier_prefix                     = [90mnull[0m[0m
    instance_class                        = "db.t4g.micro"
    iops                                  = 0
    kms_key_id                            = [90mnull[0m[0m
    latest_restorable_time                = [90mnull[0m[0m
    license_model                         = "general-public-license"
    listener_endpoint                     = []
    maintenance_window                    = "thu:10:12-thu:10:42"
    master_user_secret                    = []
    max_allocated_storage                 = 0
    monitoring_interval                   = 0
    monitoring_role_arn                   = [90mnull[0m[0m
    multi_az                              = true
    name                                  = [90mnull[0m[0m
    nchar_character_set_name              = [90mnull[0m[0m
    network_type                          = "IPV4"
    option_group_name                     = "default:mysql-8-0"
    parameter_group_name                  = "default.mysql8.0"
    password                              = (sensitive value)
    performance_insights_enabled          = false
    performance_insights_kms_key_id       = [90mnull[0m[0m
    performance_insights_retention_period = 0
    port                                  = 3306
    publicly_accessible                   = false
    replica_mode                          = [90mnull[0m[0m
    replicas                              = []
    replicate_source_db                   = [90mnull[0m[0m
    resource_id                           = "db-BP7XLFWILZ7FWNXQSSQYEWMXUI"
    skip_final_snapshot                   = true
    status                                = "available"
    storage_encrypted                     = false
    storage_throughput                    = 0
    storage_type                          = "standard"
    tags                                  = {
        "Name" = "appdb"
    }
    tags_all                              = {
        "Name" = "appdb"
    }
    timezone                              = [90mnull[0m[0m
    username                              = "admin_3_tier"
    vpc_security_group_ids                = [
        "sg-095859e6b90397963",
    ]
}

# module.rds.aws_db_subnet_group.db-subnet:
resource "aws_db_subnet_group" "db-subnet" {
    arn                     = "arn:aws:rds:us-east-1:513410254332:subgrp:panda-db-subnet-a-b"
    description             = "Managed by Terraform"
    id                      = "panda-db-subnet-a-b"
    name                    = "panda-db-subnet-a-b"
    name_prefix             = [90mnull[0m[0m
    subnet_ids              = [
        "subnet-01aaa5bc684b0c574",
        "subnet-060a56ecadf63d216",
    ]
    supported_network_types = [
        "IPV4",
    ]
    tags                    = {}
    tags_all                = {}
    vpc_id                  = "vpc-00a9b47f260ce0690"
}
# module.s3.aws_s3_bucket.panda-bucket:
resource "aws_s3_bucket" "panda-bucket" {
    acceleration_status         = [90mnull[0m[0m
    arn                         = "arn:aws:s3:::panda-files-app"
    bucket                      = "panda-files-app"
    bucket_domain_name          = "panda-files-app.s3.amazonaws.com"
    bucket_prefix               = [90mnull[0m[0m
    bucket_regional_domain_name = "panda-files-app.s3.amazonaws.com"
    force_destroy               = true
    hosted_zone_id              = "Z3AQBSTGFYJSTF"
    id                          = "panda-files-app"
    object_lock_enabled         = false
    policy                      = [90mnull[0m[0m
    region                      = "us-east-1"
    request_payer               = "BucketOwner"
    tags                        = {
        "Environment" = "Dev"
        "Name"        = "panda-files-app-files"
    }
    tags_all                    = {
        "Environment" = "Dev"
        "Name"        = "panda-files-app-files"
    }

    grant {
        id          = "1b8188c46fd8935275c8f66d99e3c7fda4fc46ac42327479ee84342e70e029cb"
        permissions = [
            "FULL_CONTROL",
        ]
        type        = "CanonicalUser"
        uri         = [90mnull[0m[0m
    }

    server_side_encryption_configuration {
        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                kms_master_key_id = [90mnull[0m[0m
                sse_algorithm     = "AES256"
            }
        }
    }

    versioning {
        enabled    = false
        mfa_delete = false
    }
}

# module.s3.aws_s3_object.app_code_upload["app-tier/DbConfig.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "bfce9b283f38d5e96574b2be4d1ebd3b"
    force_destroy                 = false
    id                            = "application-code/app-tier/DbConfig.js"
    key                           = "application-code/app-tier/DbConfig.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/app-tier/DbConfig.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["app-tier/README.md"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "ee26df7183085c627e5bda5360b78e44"
    force_destroy                 = false
    id                            = "application-code/app-tier/README.md"
    key                           = "application-code/app-tier/README.md"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/app-tier/README.md"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["app-tier/TransactionService.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "e8d86d592753e1fc582f2dc293268d93"
    force_destroy                 = false
    id                            = "application-code/app-tier/TransactionService.js"
    key                           = "application-code/app-tier/TransactionService.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/app-tier/TransactionService.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["app-tier/index.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "b2c79ba7fd87a1b51221130e2c387a65"
    force_destroy                 = false
    id                            = "application-code/app-tier/index.js"
    key                           = "application-code/app-tier/index.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/app-tier/index.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["app-tier/package-lock.json"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "43a6dd24d6259a5adbad42bdef4fd906"
    force_destroy                 = false
    id                            = "application-code/app-tier/package-lock.json"
    key                           = "application-code/app-tier/package-lock.json"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/app-tier/package-lock.json"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["app-tier/package.json"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "cc173129e924757aff67aaa24419566b"
    force_destroy                 = false
    id                            = "application-code/app-tier/package.json"
    key                           = "application-code/app-tier/package.json"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/app-tier/package.json"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["nginx.conf"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "621b719532f6d2b391605cd9be30c6a4"
    force_destroy                 = false
    id                            = "application-code/nginx.conf"
    key                           = "application-code/nginx.conf"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/nginx.conf"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/README.md"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "c64ca2b5dc0ae30f3cf8ac05a46e998a"
    force_destroy                 = false
    id                            = "application-code/web-tier/README.md"
    key                           = "application-code/web-tier/README.md"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/README.md"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/package.json"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "48383a0576de4f3fb1977ef849b2eeed"
    force_destroy                 = false
    id                            = "application-code/web-tier/package.json"
    key                           = "application-code/web-tier/package.json"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/package.json"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/public/index.html"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "2713d23a48428953d282203441881094"
    force_destroy                 = false
    id                            = "application-code/web-tier/public/index.html"
    key                           = "application-code/web-tier/public/index.html"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/public/index.html"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/public/robots.txt"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "61c27d2cd39a713f7829422c3d9edcc7"
    force_destroy                 = false
    id                            = "application-code/web-tier/public/robots.txt"
    key                           = "application-code/web-tier/public/robots.txt"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/public/robots.txt"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/.DS_Store"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "043538f594b20af06afac65638c12244"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/.DS_Store"
    key                           = "application-code/web-tier/src/.DS_Store"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/.DS_Store"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/App.css"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "d13a52212899f79d8eaec9710ea53b39"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/App.css"
    key                           = "application-code/web-tier/src/App.css"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/App.css"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/App.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "0ce5fe36ed49d37762aadb0a95fd2ae6"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/App.js"
    key                           = "application-code/web-tier/src/App.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/App.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/App.test.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "83ca979af0e840672a4aa673b0c7be01"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/App.test.js"
    key                           = "application-code/web-tier/src/App.test.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/App.test.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/assets/3TierArch.png"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "f903537e49e4ce10607e4dc955ec8069"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/assets/3TierArch.png"
    key                           = "application-code/web-tier/src/assets/3TierArch.png"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/assets/3TierArch.png"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/.DS_Store"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "f8462d61a845bc6550b4ee37260002b6"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/.DS_Store"
    key                           = "application-code/web-tier/src/components/.DS_Store"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/.DS_Store"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/Burger/Burger.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "a5d965b205409be80561f018b699adea"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/Burger/Burger.js"
    key                           = "application-code/web-tier/src/components/Burger/Burger.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/Burger/Burger.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/Burger/Burger.styled.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "b2a2b36bec8c7a1fb86c8c96c106dc10"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/Burger/Burger.styled.js"
    key                           = "application-code/web-tier/src/components/Burger/Burger.styled.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/Burger/Burger.styled.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/Burger/index.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "6e4b039730ed4da56a4064232c202233"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/Burger/index.js"
    key                           = "application-code/web-tier/src/components/Burger/index.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/Burger/index.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/DatabaseDemo/DatabaseDemo.css"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "ccbbea93949bbdc9215338ec1e53c762"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/DatabaseDemo/DatabaseDemo.css"
    key                           = "application-code/web-tier/src/components/DatabaseDemo/DatabaseDemo.css"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/DatabaseDemo/DatabaseDemo.css"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/DatabaseDemo/DatabaseDemo.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "9ab2d96558ec2756e4c452cba6ee2cfd"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/DatabaseDemo/DatabaseDemo.js"
    key                           = "application-code/web-tier/src/components/DatabaseDemo/DatabaseDemo.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/DatabaseDemo/DatabaseDemo.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/Home/Home.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "b772edaaa17e61f8f394ae63b304eaef"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/Home/Home.js"
    key                           = "application-code/web-tier/src/components/Home/Home.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/Home/Home.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/Menu/Menu.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "dc803e695cfaaf3c7926e86f327d81b9"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/Menu/Menu.js"
    key                           = "application-code/web-tier/src/components/Menu/Menu.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/Menu/Menu.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/Menu/Menu.styled.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "0c08ea6a16e4d10b09ba5c67a1561193"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/Menu/Menu.styled.js"
    key                           = "application-code/web-tier/src/components/Menu/Menu.styled.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/Menu/Menu.styled.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/Menu/index.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "a0d7779bf693d230afd821ba2785a0a3"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/Menu/index.js"
    key                           = "application-code/web-tier/src/components/Menu/index.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/Menu/index.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/components/index.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "9754a556d58a9481d74e01a7cb1ff379"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/components/index.js"
    key                           = "application-code/web-tier/src/components/index.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/components/index.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/global.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "8921ee2713f9fb38fb9c630cc1766904"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/global.js"
    key                           = "application-code/web-tier/src/global.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/global.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/hooks.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "41d5a7e3d265564b7aa3c30180741b04"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/hooks.js"
    key                           = "application-code/web-tier/src/hooks.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/hooks.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/index.css"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "7386d27f653921d6b5c3b54e0cd9d67d"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/index.css"
    key                           = "application-code/web-tier/src/index.css"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/index.css"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/index.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "0f52bca8d3ae14f17fa443a1ab3c1ac3"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/index.js"
    key                           = "application-code/web-tier/src/index.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/index.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/reportWebVitals.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "b528fd380de9b503eb5c84973639cca4"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/reportWebVitals.js"
    key                           = "application-code/web-tier/src/reportWebVitals.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/reportWebVitals.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/setupTests.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "72158175c4ba432ede32a7c2ca4143e0"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/setupTests.js"
    key                           = "application-code/web-tier/src/setupTests.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/setupTests.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}

# module.s3.aws_s3_object.app_code_upload["web-tier/src/theme.js"]:
resource "aws_s3_object" "app_code_upload" {
    acl                           = "private"
    bucket                        = "panda-files-app"
    bucket_key_enabled            = false
    cache_control                 = [90mnull[0m[0m
    content_disposition           = [90mnull[0m[0m
    content_encoding              = [90mnull[0m[0m
    content_language              = [90mnull[0m[0m
    content_type                  = "binary/octet-stream"
    etag                          = "a1aa698756c35f056a1b62fbbd0f1c40"
    force_destroy                 = false
    id                            = "application-code/web-tier/src/theme.js"
    key                           = "application-code/web-tier/src/theme.js"
    metadata                      = {}
    object_lock_legal_hold_status = [90mnull[0m[0m
    object_lock_mode              = [90mnull[0m[0m
    object_lock_retain_until_date = [90mnull[0m[0m
    server_side_encryption        = "AES256"
    source                        = "./application-code/application-code/web-tier/src/theme.js"
    storage_class                 = "STANDARD"
    tags                          = {}
    tags_all                      = {}
    version_id                    = [90mnull[0m[0m
    website_redirect              = [90mnull[0m[0m
}
# module.security-group.aws_security_group.alb_sg:
resource "aws_security_group" "alb_sg" {
    arn                    = "arn:aws:ec2:us-east-1:513410254332:security-group/sg-01fb4493705c04f74"
    description            = "enable http/https access on port 80/443"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-01fb4493705c04f74"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "http access"
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 80
        },
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "https access"
            from_port        = 443
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 443
        },
    ]
    name                   = "alb security group"
    name_prefix            = [90mnull[0m[0m
    owner_id               = "513410254332"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "alb_sg"
    }
    tags_all               = {
        "Name" = "alb_sg"
    }
    vpc_id                 = "vpc-00a9b47f260ce0690"
}

# module.security-group.aws_security_group.client_sg:
resource "aws_security_group" "client_sg" {
    arn                    = "arn:aws:ec2:us-east-1:513410254332:security-group/sg-02409d87c839d115a"
    description            = "enable http/https access on port 80 for client sg"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-02409d87c839d115a"
    ingress                = [
        {
            cidr_blocks      = []
            description      = "http access"
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-01fb4493705c04f74",
            ]
            self             = false
            to_port          = 80
        },
    ]
    name                   = "client_sg"
    name_prefix            = [90mnull[0m[0m
    owner_id               = "513410254332"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "Client_sg"
    }
    tags_all               = {
        "Name" = "Client_sg"
    }
    vpc_id                 = "vpc-00a9b47f260ce0690"
}

# module.security-group.aws_security_group.db_sg:
resource "aws_security_group" "db_sg" {
    arn                    = "arn:aws:ec2:us-east-1:513410254332:security-group/sg-095859e6b90397963"
    description            = "enable mysql access on port 3305 from server-sg"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-095859e6b90397963"
    ingress                = [
        {
            cidr_blocks      = []
            description      = "mysql access"
            from_port        = 3306
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-08489743f8adc245c",
            ]
            self             = false
            to_port          = 3306
        },
    ]
    name                   = "db_sg"
    name_prefix            = [90mnull[0m[0m
    owner_id               = "513410254332"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "database_sg"
    }
    tags_all               = {
        "Name" = "database_sg"
    }
    vpc_id                 = "vpc-00a9b47f260ce0690"
}

# module.security-group.aws_security_group.internal_alb_sg:
resource "aws_security_group" "internal_alb_sg" {
    arn                    = "arn:aws:ec2:us-east-1:513410254332:security-group/sg-04fa4d7aeb6e79995"
    description            = "enable http/https access on port 80 for internal alb sg"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-04fa4d7aeb6e79995"
    ingress                = [
        {
            cidr_blocks      = []
            description      = "http access"
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-02409d87c839d115a",
            ]
            self             = false
            to_port          = 80
        },
    ]
    name                   = "internal_alb_sg"
    name_prefix            = [90mnull[0m[0m
    owner_id               = "513410254332"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "internal_alb_sg"
    }
    tags_all               = {
        "Name" = "internal_alb_sg"
    }
    vpc_id                 = "vpc-00a9b47f260ce0690"
}

# module.security-group.aws_security_group.server_sg:
resource "aws_security_group" "server_sg" {
    arn                    = "arn:aws:ec2:us-east-1:513410254332:security-group/sg-08489743f8adc245c"
    description            = "enable http/https access on port 4000 for server app sg"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = [90mnull[0m[0m
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-08489743f8adc245c"
    ingress                = [
        {
            cidr_blocks      = []
            description      = "custom tcp access"
            from_port        = 4000
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-04fa4d7aeb6e79995",
            ]
            self             = false
            to_port          = 4000
        },
    ]
    name                   = "server_sg"
    name_prefix            = [90mnull[0m[0m
    owner_id               = "513410254332"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "server_sg"
    }
    tags_all               = {
        "Name" = "server_sg"
    }
    vpc_id                 = "vpc-00a9b47f260ce0690"
}
# module.vpc.data.aws_availability_zones.available_zones:
data "aws_availability_zones" "available_zones" {
    group_names = [
        "us-east-1-zg-1",
    ]
    id          = "us-east-1"
    names       = [
        "us-east-1a",
        "us-east-1b",
        "us-east-1c",
        "us-east-1d",
        "us-east-1e",
        "us-east-1f",
    ]
    zone_ids    = [
        "use1-az1",
        "use1-az2",
        "use1-az4",
        "use1-az6",
        "use1-az3",
        "use1-az5",
    ]
}

# module.vpc.aws_internet_gateway.internet_gateway:
resource "aws_internet_gateway" "internet_gateway" {
    arn      = "arn:aws:ec2:us-east-1:513410254332:internet-gateway/igw-0ada39b355801dafe"
    id       = "igw-0ada39b355801dafe"
    owner_id = "513410254332"
    tags     = {
        "Name" = "three-tier-app-igw"
    }
    tags_all = {
        "Name" = "three-tier-app-igw"
    }
    vpc_id   = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_route_table.public_route_table:
resource "aws_route_table" "public_route_table" {
    arn              = "arn:aws:ec2:us-east-1:513410254332:route-table/rtb-01011e56ebbc4a98d"
    id               = "rtb-01011e56ebbc4a98d"
    owner_id         = "513410254332"
    propagating_vgws = []
    route            = [
        {
            carrier_gateway_id         = [90mnull[0m[0m
            cidr_block                 = "0.0.0.0/0"
            core_network_arn           = [90mnull[0m[0m
            destination_prefix_list_id = [90mnull[0m[0m
            egress_only_gateway_id     = [90mnull[0m[0m
            gateway_id                 = "igw-0ada39b355801dafe"
            instance_id                = [90mnull[0m[0m
            ipv6_cidr_block            = [90mnull[0m[0m
            local_gateway_id           = [90mnull[0m[0m
            nat_gateway_id             = [90mnull[0m[0m
            network_interface_id       = [90mnull[0m[0m
            transit_gateway_id         = [90mnull[0m[0m
            vpc_endpoint_id            = [90mnull[0m[0m
            vpc_peering_connection_id  = [90mnull[0m[0m
        },
    ]
    tags             = {
        "Name" = "Public-rt"
    }
    tags_all         = {
        "Name" = "Public-rt"
    }
    vpc_id           = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_route_table_association.pub-sub-1a_route_table_association:
resource "aws_route_table_association" "pub-sub-1a_route_table_association" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-03d9b3346f2ba9722"
    route_table_id = "rtb-01011e56ebbc4a98d"
    subnet_id      = "subnet-0d213ef95039ce524"
}

# module.vpc.aws_route_table_association.pub-sub-2-b_route_table_association:
resource "aws_route_table_association" "pub-sub-2-b_route_table_association" {
    gateway_id     = [90mnull[0m[0m
    id             = "rtbassoc-07b5094c3a7357844"
    route_table_id = "rtb-01011e56ebbc4a98d"
    subnet_id      = "subnet-0d9c6e4cded857c70"
}

# module.vpc.aws_subnet.pri_sub_3a:
resource "aws_subnet" "pri_sub_3a" {
    arn                                            = "arn:aws:ec2:us-east-1:513410254332:subnet/subnet-0cc105a62bc97ceda"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az1"
    cidr_block                                     = "10.0.3.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0cc105a62bc97ceda"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "513410254332"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "pri-sub-3a"
    }
    tags_all                                       = {
        "Name" = "pri-sub-3a"
    }
    vpc_id                                         = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_subnet.pri_sub_4b:
resource "aws_subnet" "pri_sub_4b" {
    arn                                            = "arn:aws:ec2:us-east-1:513410254332:subnet/subnet-0be916784820486ac"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az2"
    cidr_block                                     = "10.0.4.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0be916784820486ac"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "513410254332"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "pri-sub-4b"
    }
    tags_all                                       = {
        "Name" = "pri-sub-4b"
    }
    vpc_id                                         = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_subnet.pri_sub_5a:
resource "aws_subnet" "pri_sub_5a" {
    arn                                            = "arn:aws:ec2:us-east-1:513410254332:subnet/subnet-01e294dc0e4ba8dc1"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az1"
    cidr_block                                     = "10.0.5.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-01e294dc0e4ba8dc1"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "513410254332"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "pri-sub-5a"
    }
    tags_all                                       = {
        "Name" = "pri-sub-5a"
    }
    vpc_id                                         = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_subnet.pri_sub_6b:
resource "aws_subnet" "pri_sub_6b" {
    arn                                            = "arn:aws:ec2:us-east-1:513410254332:subnet/subnet-0e344c94500c1b418"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az2"
    cidr_block                                     = "10.0.6.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0e344c94500c1b418"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "513410254332"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "pri-sub-6b"
    }
    tags_all                                       = {
        "Name" = "pri-sub-6b"
    }
    vpc_id                                         = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_subnet.pri_sub_7a:
resource "aws_subnet" "pri_sub_7a" {
    arn                                            = "arn:aws:ec2:us-east-1:513410254332:subnet/subnet-01aaa5bc684b0c574"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az1"
    cidr_block                                     = "10.0.7.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-01aaa5bc684b0c574"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "513410254332"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "pri-sub-5a"
    }
    tags_all                                       = {
        "Name" = "pri-sub-5a"
    }
    vpc_id                                         = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_subnet.pri_sub_8b:
resource "aws_subnet" "pri_sub_8b" {
    arn                                            = "arn:aws:ec2:us-east-1:513410254332:subnet/subnet-060a56ecadf63d216"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az2"
    cidr_block                                     = "10.0.8.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-060a56ecadf63d216"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "513410254332"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "pri-sub-6b"
    }
    tags_all                                       = {
        "Name" = "pri-sub-6b"
    }
    vpc_id                                         = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_subnet.pub_sub_1a:
resource "aws_subnet" "pub_sub_1a" {
    arn                                            = "arn:aws:ec2:us-east-1:513410254332:subnet/subnet-0d213ef95039ce524"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1a"
    availability_zone_id                           = "use1-az1"
    cidr_block                                     = "10.0.1.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0d213ef95039ce524"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = true
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "513410254332"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "pub_sub_1a"
    }
    tags_all                                       = {
        "Name" = "pub_sub_1a"
    }
    vpc_id                                         = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_subnet.pub_sub_2b:
resource "aws_subnet" "pub_sub_2b" {
    arn                                            = "arn:aws:ec2:us-east-1:513410254332:subnet/subnet-0d9c6e4cded857c70"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-1b"
    availability_zone_id                           = "use1-az2"
    cidr_block                                     = "10.0.2.0/24"
    customer_owned_ipv4_pool                       = [90mnull[0m[0m
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0d9c6e4cded857c70"
    ipv6_cidr_block                                = [90mnull[0m[0m
    ipv6_cidr_block_association_id                 = [90mnull[0m[0m
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = true
    outpost_arn                                    = [90mnull[0m[0m
    owner_id                                       = "513410254332"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "pub_sub_2b"
    }
    tags_all                                       = {
        "Name" = "pub_sub_2b"
    }
    vpc_id                                         = "vpc-00a9b47f260ce0690"
}

# module.vpc.aws_vpc.vpc:
resource "aws_vpc" "vpc" {
    arn                                  = "arn:aws:ec2:us-east-1:513410254332:vpc/vpc-00a9b47f260ce0690"
    assign_generated_ipv6_cidr_block     = false
    cidr_block                           = "10.0.0.0/16"
    default_network_acl_id               = "acl-02ca3d82a7edcbcbf"
    default_route_table_id               = "rtb-05a17271708b4a29a"
    default_security_group_id            = "sg-0332677743f7eb133"
    dhcp_options_id                      = "dopt-0ca36381dcb570912"
    enable_classiclink                   = false
    enable_classiclink_dns_support       = false
    enable_dns_hostnames                 = true
    enable_dns_support                   = true
    enable_network_address_usage_metrics = false
    id                                   = "vpc-00a9b47f260ce0690"
    instance_tenancy                     = "default"
    ipv6_association_id                  = [90mnull[0m[0m
    ipv6_cidr_block                      = [90mnull[0m[0m
    ipv6_cidr_block_network_border_group = [90mnull[0m[0m
    ipv6_ipam_pool_id                    = [90mnull[0m[0m
    ipv6_netmask_length                  = 0
    main_route_table_id                  = "rtb-05a17271708b4a29a"
    owner_id                             = "513410254332"
    tags                                 = {
        "Name" = "three-tier-app-vpc"
    }
    tags_all                             = {
        "Name" = "three-tier-app-vpc"
    }
}
